// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Barbershop models
model Barbershop {
    id          String   @id @default(cuid())
    name        String
    description String?
    address     String
    city        String
    postalCode  String?
    latitude    Float?
    longitude   Float?
    phone       String?
    email       String?
    website     String?
    imageUrl    String?
    rating      Float    @default(0)
    reviewCount Int      @default(0)
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    services     Service[]
    reservations Reservation[]
    reviews      Review[]
    workingHours WorkingHours[]

    @@index([city])
    @@index([latitude, longitude])
}

model Service {
    id           String     @id @default(cuid())
    name         String
    description  String?
    duration     Int        // Duration in minutes
    price        Float
    isActive     Boolean    @default(true)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    // Relations
    barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
    barbershopId String
    reservations Reservation[]

    @@index([barbershopId])
}

model Reservation {
    id          String            @id @default(cuid())
    date        DateTime
    status      ReservationStatus @default(PENDING)
    notes       String?
    totalPrice  Float
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    // Relations
    user        User              @relation(fields: [userId], references: [id])
    userId      String
    barbershop  Barbershop        @relation(fields: [barbershopId], references: [id])
    barbershopId String
    service     Service           @relation(fields: [serviceId], references: [id])
    serviceId   String

    @@index([userId])
    @@index([barbershopId])
    @@index([date])
}

model Review {
    id          String   @id @default(cuid())
    rating      Int      // 1-5 stars
    comment     String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    user        User       @relation(fields: [userId], references: [id])
    userId      String
    barbershop  Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
    barbershopId String

    @@unique([userId, barbershopId])
    @@index([barbershopId])
}

model WorkingHours {
    id          String   @id @default(cuid())
    dayOfWeek   Int      // 0 = Sunday, 1 = Monday, etc.
    openTime    String   // Format: "09:00"
    closeTime   String   // Format: "18:00"
    isClosed    Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    barbershop  Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
    barbershopId String

    @@unique([barbershopId, dayOfWeek])
}

enum ReservationStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    accounts      Account[]
    sessions      Session[]
    reservations  Reservation[]
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
